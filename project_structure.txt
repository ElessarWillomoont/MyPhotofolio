--- Project File Tree ---
[.]
[docs]
[public]
  [localesl]
    [components]
      Mainpage.yaml
      NavBar.yaml
    [pages]
      [projects]
        project-a.yaml
        project-b.yaml
[src]
  [app]
    globals.css
    layout.tsx
    layout_origin.tsx
    page.module.css
    page.tsx
    page_original.module.css
    page_original.tsx
    [fonts]
    [projects]
      [project-a]
        page.tsx
        ProjectPage.module.css
      [project-b]
        page.tsx
        ProjectPage.module.css
  [components]
    Header.module.css
    Header.tsx
    LanguageLayout.tsx
    LanguageSelector.module.css
    LanguageSelector.tsx
    MainPage.module.css
    MainPage.tsx
    NavBar.json
    NavBar.module.css
    NavBar.tsx
  [context]
    LanguageContext.tsx
  [public]
    [images]

--- Project File Tree with Content ---
[.]
[docs]
[public]
  [localesl]
    [components]
      Mainpage.yaml
        --- File Content ---
        en:
          greeting: "Hi, This is Main Page"
          message: |
            Hello World!
                This is a multiline
            message for testing.
        
        fr:
          greeting: "Salut, ceci est la page principale"
          message: |
            Bonjour tout le monde !
                Ceci est un message
            multi-lignes pour les tests.
        
        zh:
          greeting: "嗨，这是主页"
          message: |
            你好，世界！
                这是一个用于测试的
            多行消息。
        --- End of File ---
      NavBar.yaml
        --- File Content ---
        en:
          home: "Home"
          about: "About"
          services: "Services"
          contact: "Contact"
        fr:
          home: "Accueil"
          about: "À propos"
          services: "Services"
          contact: "Contact"
        zh:
          home: "主页"
          about: "关于我们"
          services: "服务"
          contact: "联系"
        --- End of File ---
    [pages]
      [projects]
        project-a.yaml
          --- File Content ---
          en:
            title: "Project A"
            description: "Description of Project A..."
          fr:
            title: "Projet A"
            description: "Description du Projet A..."
          zh:
            title: "项目A"
            description: "项目A的描述..."
          --- End of File ---
        project-b.yaml
          --- File Content ---
          en:
            title: "Project B"
            description: "Description of Project B..."
          fr:
            title: "Projet B"
            description: "Description du Projet B..."
          zh:
            title: "项目B"
            description: "项目B的描述..."
          --- End of File ---
[src]
  [app]
    globals.css
      --- File Content ---
      @import url('bootstrap/dist/css/bootstrap.min.css');
      
      :root {
        --background: #ffffff;
        --foreground: #171717;
      }
      
      @media (prefers-color-scheme: dark) {
        :root {
          --background: #0a0a0a;
          --foreground: #ededed;
        }
      }
      
      html,
      body {
        max-width: 100vw;
        overflow-x: hidden;
      }
      
      body {
        color: var(--foreground);
        background: var(--background);
        font-family: Arial, Helvetica, sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      * {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }
      
      a {
        color: inherit;
        text-decoration: none;
      }
      
      @media (prefers-color-scheme: dark) {
        html {
          color-scheme: dark;
        }
      }
      --- End of File ---
    layout.tsx
      --- File Content ---
      // src/app/layout.tsx
      import type { Metadata } from "next";
      import "./globals.css";
      import { LanguageProvider } from '../context/LanguageContext';
      import LanguageLayout from '../components/LanguageLayout';
      
      export const metadata: Metadata = {
        title: "Photofolio of Candle",
        description: "Photofolio of Candle",
      };
      
      export default function RootLayout({
        children,
      }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <LanguageProvider>
            <LanguageLayout>
              {children}
            </LanguageLayout>
          </LanguageProvider>
        );
      }
      --- End of File ---
    layout_origin.tsx
      --- File Content ---
      import type { Metadata } from "next";
      import localFont from "next/font/local";
      import "./globals.css";
      
      const geistSans = localFont({
        src: "./fonts/GeistVF.woff",
        variable: "--font-geist-sans",
        weight: "100 900",
      });
      const geistMono = localFont({
        src: "./fonts/GeistMonoVF.woff",
        variable: "--font-geist-mono",
        weight: "100 900",
      });
      
      export const metadata: Metadata = {
        title: "Create Next App",
        description: "Generated by create next app",
      };
      
      export default function RootLayout({
        children,
      }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <html lang="en">
            <body className={`${geistSans.variable} ${geistMono.variable}`}>
              {children}
            </body>
          </html>
        );
      }
      --- End of File ---
    page.module.css
      --- File Content ---
      --- End of File ---
    page.tsx
      --- File Content ---
      import React from 'react';
      import Header from '../components/Header'; // 引入 Header 组件
      import MainPage from '../components/MainPage';
      import NavBar from '../components/NavBar';
      import LanguageSelector from '../components/LanguageSelector'; // 引入语言选择组件
      
      const Page: React.FC = () => {
        return (
          <>
            <Header /> {/* 使用 Header 组件 */}
            <NavBar />
            <LanguageSelector /> {/* 引入语言选择组件 */}
            <MainPage />
            <MainPage />
            <MainPage />
            <MainPage />
          </>
        );
      };
      
      export default Page;
      --- End of File ---
    page_original.module.css
      --- File Content ---
      .page {
        --gray-rgb: 0, 0, 0;
        --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
        --gray-alpha-100: rgba(var(--gray-rgb), 0.05);
      
        --button-primary-hover: #383838;
        --button-secondary-hover: #f2f2f2;
      
        display: grid;
        grid-template-rows: 20px 1fr 20px;
        align-items: center;
        justify-items: center;
        min-height: 100svh;
        padding: 80px;
        gap: 64px;
        font-family: var(--font-geist-sans);
      }
      
      @media (prefers-color-scheme: dark) {
        .page {
          --gray-rgb: 255, 255, 255;
          --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
          --gray-alpha-100: rgba(var(--gray-rgb), 0.06);
      
          --button-primary-hover: #ccc;
          --button-secondary-hover: #1a1a1a;
        }
      }
      
      .main {
        display: flex;
        flex-direction: column;
        gap: 32px;
        grid-row-start: 2;
      }
      
      .main ol {
        font-family: var(--font-geist-mono);
        padding-left: 0;
        margin: 0;
        font-size: 14px;
        line-height: 24px;
        letter-spacing: -0.01em;
        list-style-position: inside;
      }
      
      .main li:not(:last-of-type) {
        margin-bottom: 8px;
      }
      
      .main code {
        font-family: inherit;
        background: var(--gray-alpha-100);
        padding: 2px 4px;
        border-radius: 4px;
        font-weight: 600;
      }
      
      .ctas {
        display: flex;
        gap: 16px;
      }
      
      .ctas a {
        appearance: none;
        border-radius: 128px;
        height: 48px;
        padding: 0 20px;
        border: none;
        border: 1px solid transparent;
        transition: background 0.2s, color 0.2s, border-color 0.2s;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        line-height: 20px;
        font-weight: 500;
      }
      
      a.primary {
        background: var(--foreground);
        color: var(--background);
        gap: 8px;
      }
      
      a.secondary {
        border-color: var(--gray-alpha-200);
        min-width: 180px;
      }
      
      .footer {
        grid-row-start: 3;
        display: flex;
        gap: 24px;
      }
      
      .footer a {
        display: flex;
        align-items: center;
        gap: 8px;
      }
      
      .footer img {
        flex-shrink: 0;
      }
      
      /* Enable hover only on non-touch devices */
      @media (hover: hover) and (pointer: fine) {
        a.primary:hover {
          background: var(--button-primary-hover);
          border-color: transparent;
        }
      
        a.secondary:hover {
          background: var(--button-secondary-hover);
          border-color: transparent;
        }
      
        .footer a:hover {
          text-decoration: underline;
          text-underline-offset: 4px;
        }
      }
      
      @media (max-width: 600px) {
        .page {
          padding: 32px;
          padding-bottom: 80px;
        }
      
        .main {
          align-items: center;
        }
      
        .main ol {
          text-align: center;
        }
      
        .ctas {
          flex-direction: column;
        }
      
        .ctas a {
          font-size: 14px;
          height: 40px;
          padding: 0 16px;
        }
      
        a.secondary {
          min-width: auto;
        }
      
        .footer {
          flex-wrap: wrap;
          align-items: center;
          justify-content: center;
        }
      }
      
      @media (prefers-color-scheme: dark) {
        .logo {
          filter: invert();
        }
      }
      --- End of File ---
    page_original.tsx
      --- File Content ---
      import Image from "next/image";
      import styles from "./page.module.css";
      
      export default function Home() {
        return (
          <div className={styles.page}>
            <main className={styles.main}>
              <Image
                className={styles.logo}
                src="https://nextjs.org/icons/next.svg"
                alt="Next.js logo"
                width={180}
                height={38}
                priority
              />
              <ol>
                <li>
                  Get started by editing <code>src/app/page.tsx</code>.
                </li>
                <li>Save and see your changes instantly.</li>
              </ol>
      
              <div className={styles.ctas}>
                <a
                  className={styles.primary}
                  href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <Image
                    className={styles.logo}
                    src="https://nextjs.org/icons/vercel.svg"
                    alt="Vercel logomark"
                    width={20}
                    height={20}
                  />
                  Deploy now
                </a>
                <a
                  href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
                  target="_blank"
                  rel="noopener noreferrer"
                  className={styles.secondary}
                >
                  Read our docs
                </a>
              </div>
            </main>
            <footer className={styles.footer}>
              <a
                href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
                target="_blank"
                rel="noopener noreferrer"
              >
                <Image
                  aria-hidden
                  src="https://nextjs.org/icons/file.svg"
                  alt="File icon"
                  width={16}
                  height={16}
                />
                Learn
              </a>
              <a
                href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
                target="_blank"
                rel="noopener noreferrer"
              >
                <Image
                  aria-hidden
                  src="https://nextjs.org/icons/window.svg"
                  alt="Window icon"
                  width={16}
                  height={16}
                />
                Examples
              </a>
              <a
                href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
                target="_blank"
                rel="noopener noreferrer"
              >
                <Image
                  aria-hidden
                  src="https://nextjs.org/icons/globe.svg"
                  alt="Globe icon"
                  width={16}
                  height={16}
                />
                Go to nextjs.org →
              </a>
            </footer>
          </div>
        );
      }
      --- End of File ---
    [fonts]
    [projects]
      [project-a]
        page.tsx
          --- File Content ---
          // pages/project-a.tsx
          "use client";
          
          import React, { useEffect, useMemo, useState } from 'react';
          import { useAppLanguage } from '../../../context/LanguageContext';
          import styles from './ProjectPage.module.css';
          import LanguageSelector from '../../../components/LanguageSelector'; // 引入语言选择组件
          import NavBar from '../../../components/NavBar';
          
          const ProjectAPage: React.FC = () => {
            const { getTranslations } = useAppLanguage();
            
            const defaultTranslations = useMemo(() => ({
              title: "Project A",
              description: "Description of Project A..."
            }), []);
          
            const [translations, setTranslations] = useState<{ [key: string]: string }>(defaultTranslations);
          
            useEffect(() => {
              const loadTranslations = async () => {
                const loadedTranslations = await getTranslations('/pages/projects/project-a', defaultTranslations);
                setTranslations(loadedTranslations);
              };
              loadTranslations();
            }, [getTranslations, defaultTranslations]);
          
            return (
              <div className={styles.projectPage}>
                <LanguageSelector /> {/* 引入语言选择组件 */}
                <NavBar />
                <h1>{translations.title}</h1>
                <p>{translations.description}</p>
              </div>
            );
          };
          
          export default ProjectAPage;
          --- End of File ---
        ProjectPage.module.css
          --- File Content ---
          --- End of File ---
      [project-b]
        page.tsx
          --- File Content ---
          // pages/project-a.tsx
          "use client";
          
          import React, { useEffect, useMemo, useState } from 'react';
          import { useAppLanguage } from '../../../context/LanguageContext';
          import styles from './ProjectPage.module.css';
          import LanguageSelector from '../../../components/LanguageSelector'; // 引入语言选择组件
          import NavBar from '../../../components/NavBar';
          
          const ProjectAPage: React.FC = () => {
            const { getTranslations } = useAppLanguage();
            
            const defaultTranslations = useMemo(() => ({
              title: "Project A",
              description: "Description of Project A..."
            }), []);
          
            const [translations, setTranslations] = useState<{ [key: string]: string }>(defaultTranslations);
          
            useEffect(() => {
              const loadTranslations = async () => {
                const loadedTranslations = await getTranslations('/pages/projects/project-b', defaultTranslations);
                setTranslations(loadedTranslations);
              };
              loadTranslations();
            }, [getTranslations, defaultTranslations]);
          
            return (
              <div className={styles.projectPage}>
                <LanguageSelector /> {/* 引入语言选择组件 */}
                <NavBar />
                <h1>{translations.title}</h1>
                <p>{translations.description}</p>
              </div>
            );
          };
          
          export default ProjectAPage;
          --- End of File ---
        ProjectPage.module.css
          --- File Content ---
          --- End of File ---
  [components]
    Header.module.css
      --- File Content ---
      .header {
          height: 60px;  /* 设置高度 */
          background-color: #f8f9fa;  /* 使用浅灰色背景 */
          border-bottom: 1px solid #ddd;  /* 添加底部边框 */
        }
        
      --- End of File ---
    Header.tsx
      --- File Content ---
      import React from 'react';
      import Head from 'next/head'; // 导入 next/head 组件
      
      const Header: React.FC = () => {
        return (
          <>
            <Head>
              <meta charSet="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>Document</title>
            </Head>
            {/* 这里可以包含其他的 header 内容，例如导航栏 */}
          </>
        );
      };
      
      export default Header;
      --- End of File ---
    LanguageLayout.tsx
      --- File Content ---
      // src/components/LanguageLayout.tsx
      "use client"; // 确保这是一个客户端组件
      
      import React from 'react';
      import { useAppLanguage } from '../context/LanguageContext';
      import localFont from "next/font/local";
      
      const geistSans = localFont({
        src: "../app/fonts/GeistVF.woff",
        variable: "--font-geist-sans",
        weight: "100 900",
      });
      const geistMono = localFont({
        src: "../app/fonts/GeistMonoVF.woff",
        variable: "--font-geist-mono",
        weight: "100 900",
      });
      
      const LanguageLayout = ({ children }: { children: React.ReactNode }) => {
        const { language } = useAppLanguage(); // 从 LanguageContext 获取当前语言
      
        return (
          <html lang={language}>
            <body className={`${geistSans.variable} ${geistMono.variable}`}>
              {children}
            </body>
          </html>
        );
      };
      
      export default LanguageLayout;
      --- End of File ---
    LanguageSelector.module.css
      --- File Content ---
      /* src/components/LanguageSelector.module.css */
      .languageSelector {
          z-index: 1050; /* 足够高以覆盖其他元素 */
      }
      
      .languageButton {
          color: white; /* 白色字体 */
          font-weight: bold; /* 加粗字体 */
          font-size: 16px; /* 字体大小 */
          background-color: transparent; /* 背景透明 */
          border: none; /* 去除边框 */
      }
      
      .divider {
          height: 24px; /* 分割线高度 */
          width: 2px; /* 分割线宽度 */
          background-color: white; /* 白色分割线 */
          margin: 0 12px; /* 在分割线两边增加一些空间 */
      }
      
      @media (max-width: 768px) {
          .languageButton {
              font-size: 12px; /* 较小的字体大小适用于移动设备 */
          }
      }
      --- End of File ---
    LanguageSelector.tsx
      --- File Content ---
      // src/components/LanguageSelector.tsx
      "use client"
      
      import React from 'react';
      import { ButtonGroup, Button } from 'react-bootstrap';
      import { useAppLanguage } from '../context/LanguageContext';
      import styles from './LanguageSelector.module.css'; // 引入样式
      
      const LanguageSelector: React.FC = () => {
          const { setLanguage } = useAppLanguage();
      
          return (
              <div className={`${styles.languageSelector} position-fixed top-0 end-0 m-3`}>
                  <ButtonGroup>
                      <Button variant="link" className={`${styles.languageButton} d-none d-md-inline`} onClick={() => setLanguage('en')}>EN</Button>
                      <span className={`${styles.divider} d-none d-md-inline`}></span>
                      <Button variant="link" className={`${styles.languageButton} d-none d-md-inline`} onClick={() => setLanguage('fr')}>FR</Button>
                      <span className={`${styles.divider} d-none d-md-inline`}></span>
                      <Button variant="link" className={`${styles.languageButton} d-none d-md-inline`} onClick={() => setLanguage('zh')}>中</Button>
      
                      {/* Mobile friendly dropdown or smaller button version */}
                      <div className="d-md-none">
                          <Button variant="link" className={styles.languageButton} onClick={() => setLanguage('en')}>EN</Button>
                          <Button variant="link" className={styles.languageButton} onClick={() => setLanguage('fr')}>FR</Button>
                          <Button variant="link" className={styles.languageButton} onClick={() => setLanguage('zh')}>中</Button>
                      </div>
                  </ButtonGroup>
              </div>
          );
      };
      
      export default LanguageSelector;
      --- End of File ---
    MainPage.module.css
      --- File Content ---
      /* MainPage.module.css */
      .mainContainer {
        width: 100vw;  /* 占满整个视口宽度 */
        height: 100vh; /* 占满整个视口高度 */
        background-image: url('../public/images/background.webp'); /* 引用背景图片 */
        background-size: cover; /* 保持背景图像比例，同时填满容器 */
        background-position: center; /* 居中显示 */
        background-repeat: no-repeat; /* 不重复背景图片 */
      }
      
      .preText {
        white-space: pre-wrap; /* 保持换行 */
        word-wrap: break-word; /* 防止超出容器宽度 */
      }
      --- End of File ---
    MainPage.tsx
      --- File Content ---
      "use client";
      
      import React, { useEffect, useMemo, useState } from 'react';
      import { useAppLanguage } from '../context/LanguageContext'; // 导入 useAppLanguage
      import styles from './MainPage.module.css'; // 引入CSS模块
      
      const MainPage: React.FC = () => {
        const { language, getTranslations } = useAppLanguage();
        
        // 默认翻译内容
      
        const defaultTranslations = useMemo(() => ({
          greeting: "Hi, This is Main Page",
          message: "Hello World!"
        }), []);
      
        // 初始化翻译内容状态
        const [translations, setTranslations] = useState<{ [key: string]: string }>(defaultTranslations);
      
        // 加载 MainPage 的翻译文件
        useEffect(() => {
          const loadTranslations = async () => {
            const loadedTranslations = await getTranslations('/components/MainPage', defaultTranslations);
            setTranslations(loadedTranslations);
          };
          loadTranslations();
        }, [defaultTranslations, getTranslations, language]);
      
        return (
          <div className={styles.mainContainer}>
            {/* 主页面内容 */}
            <h1>{translations.greeting}</h1>
            <pre className={styles.preText}>{translations.message}</pre> {/* 使用本地类名 */}
          </div>
        );
      };
      
      export default MainPage;
      --- End of File ---
    NavBar.json
      --- File Content ---
      {
          "en": {
            "home": "Home",
            "about": "About",
            "services": "Services",
            "contact": "Contact",
            "language": "Language"
          },
          "fr": {
            "home": "Accueil",
            "about": "À propos",
            "services": "Services",
            "contact": "Contact",
            "language": "Langue"
          },
          "zh": {
            "home": "首页",
            "about": "关于",
            "services": "服务",
            "contact": "联系",
            "language": "语言"
          }
        }
        
      --- End of File ---
    NavBar.module.css
      --- File Content ---
      /* src/components/NavBar.module.css */
      
      /* 固定导航栏样式 */
      .fixedNav {
          position: fixed;
          right: 10px;
          top: 50%;
          transform: translateY(-50%);
          background-color: rgba(0, 0, 0, 0.7);
          padding: 1rem;
          border-radius: 8px;
          z-index: 1000;
        }
        
        /* 链接样式 */
        .fixedNav .nav-link {
          /* color: #fff !important; */
          color: aliceblue;
          margin-bottom: 0.5rem;
          text-decoration: none;
        }
        .fixedNav .nav-link:hover {
          /* color: #ddd !important; */
          color: aliceblue;
        }
        
        /* 窄屏汉堡菜单按钮样式 */
        .hamburgerButton {
          position: fixed;
          top: 45vh;
          right: 0px; /* 紧贴右侧 */
          width: 40px;
          height: 40px;
          background-color: rgba(0, 0, 0, 0.7);
          color: #fff;
          font-size: 1.5rem;
          border: none;
          border-radius: 50%;
          z-index: 1050; /* 确保按钮显示在遮罩层之上 */
          transition: right 0.3s ease, background-color 0.3s ease; /* 添加背景颜色过渡效果 */
        }
        
        .hamburgerButton:hover {
          background-color: rgba(0, 0, 0, 0.9);
        }
        
        /* 当 Offcanvas 打开时，汉堡按钮仍然保持亮色 */
        .hamburgerButtonShift {
          right: 250px; /* 将按钮移动到 Offcanvas 左侧 */
          background-color: rgba(0, 0, 0, 0.7); /* 保持亮色 */
        }
        /* 自定义 Offcanvas 样式 */
      .customOffcanvas {
          background-color: rgba(0, 0, 0, 0.8); /* 黑色半透明背景 */
          color: #fff; /* 设置文本颜色为白色 */
        }
        
        .customOffcanvas .nav-link {
          color: #fff !important; /* 链接文字颜色 */
        }
        .customOffcanvas .nav-link:hover {
          color: #ddd !important; /* 悬停效果 */
        }
      --- End of File ---
    NavBar.tsx
      --- File Content ---
      //src/components/NavBar.tsx
      
      "use client";
      
      import React, { useState, useEffect, useMemo } from 'react';
      import { Navbar, Offcanvas, Nav } from 'react-bootstrap';
      import styles from './NavBar.module.css';
      import { useAppLanguage } from '../context/LanguageContext';
      import Link from 'next/link';  // 引入 Next.js 的 Link 组件
      
      const NavBar: React.FC = () => {
        const [showOffcanvas, setShowOffcanvas] = useState(false);
        const { getTranslations } = useAppLanguage();
        const offcanvasWidth = 250;
      
        const defaultTranslations = useMemo(() => ({
          home: "Home",
          about: "About",
          services: "Services",
          contact: "Contact"
        }), []);
      
        const [translations, setTranslations] = useState<{ [key: string]: string }>(defaultTranslations);
      
        useEffect(() => {
          const loadTranslations = async () => {
            const loadedTranslations = await getTranslations('/components/NavBar', defaultTranslations);
            setTranslations(loadedTranslations);
          };
          loadTranslations();
        }, [defaultTranslations, getTranslations]);
      
        const toggleOffcanvas = () => setShowOffcanvas(!showOffcanvas);
      
        return (
          <>
            <Navbar expand="md" className={`d-none d-md-flex ${styles.fixedNav}`}>
              <Nav className="flex-column text-center">
                <Link href="/" legacyBehavior>
                  <a className="nav-link">{translations.home}</a>
                </Link>
                <Link href="/about" legacyBehavior>
                  <a className="nav-link">{translations.about}</a>
                </Link>
                <Link href="/services" legacyBehavior>
                  <a className="nav-link">{translations.services}</a>
                </Link>
                <Link href="/contact" legacyBehavior>
                  <a className="nav-link">{translations.contact}</a>
                </Link>
              </Nav>
            </Navbar>
      
            <button
              className={`d-md-none ${styles.hamburgerButton} ${showOffcanvas ? styles.hamburgerButtonShift : ''}`}
              onClick={toggleOffcanvas}
              style={{ right: showOffcanvas ? `${offcanvasWidth}px` : '0px' }}
            >
              ☰
            </button>
      
            <Offcanvas
              show={showOffcanvas}
              onHide={toggleOffcanvas}
              placement="end"
              style={{ width: `${offcanvasWidth}px`, zIndex: 1040 }}
              className={styles.customOffcanvas}
            >
              <Offcanvas.Header closeButton>
                <Offcanvas.Title>{translations.language}</Offcanvas.Title>
              </Offcanvas.Header>
              <Offcanvas.Body>
                <Nav className="flex-column">
                  <Link href="/" legacyBehavior>
                    <a className="nav-link" onClick={toggleOffcanvas}>{translations.home}</a>
                  </Link>
                  <Link href="/about" legacyBehavior>
                    <a className="nav-link" onClick={toggleOffcanvas}>{translations.about}</a>
                  </Link>
                  <Link href="/services" legacyBehavior>
                    <a className="nav-link" onClick={toggleOffcanvas}>{translations.services}</a>
                  </Link>
                  <Link href="/contact" legacyBehavior>
                    <a className="nav-link" onClick={toggleOffcanvas}>{translations.contact}</a>
                  </Link>
                </Nav>
              </Offcanvas.Body>
            </Offcanvas>
          </>
        );
      };
      
      export default NavBar;
      --- End of File ---
  [context]
    LanguageContext.tsx
      --- File Content ---
      "use client";
      
      import React, { createContext, useContext, useState, ReactNode } from 'react';
      import yaml from 'js-yaml';
      
      type Language = 'en' | 'fr' | 'zh';
      
      interface LanguageContextProps {
        language: Language;
        setLanguage: (lang: Language) => void;
        getTranslations: (filePath: string, defaultTranslations: { [key: string]: string }) => Promise<{ [key: string]: string }>;
      }
      
      const LanguageContext = createContext<LanguageContextProps | undefined>(undefined);
      
      export const LanguageProvider = ({ children }: { children: ReactNode }) => {
        const [language, setLanguage] = useState<Language>('en');
      
        const getTranslations = async (filePath: string, defaultTranslations: { [key: string]: string }) => {
          console.log(`Attempting to load translations for language: ${language} from file: ${filePath}.yaml`);
          
          try {
            // 使用 fetch 获取 YAML 文件内容
            // const response = await fetch(`/locales/${filePath}.yaml`);
            // const response = await fetch(`/localesl/components/NavBar.yaml`);
            const response = await fetch(`/localesl/${filePath}.yaml`);
            const yamlText = await response.text();
            // console.log(`YAML file loaded as string:`, yamlText);
      
            // 使用 js-yaml 解析 YAML 文件，保留格式
            const translations = yaml.load(yamlText) as { [key: string]: { [key: string]: string } };
            // console.log(`Parsed translations object:`, translations);
      
            if (translations && translations[language]) {
              console.log(`Translations loaded for ${language}:`, translations[language]);
              return { ...defaultTranslations, ...translations[language] };
            } else {
              console.warn(`Translations for ${language} not found in the YAML file. Falling back to default translations.`);
              return defaultTranslations;
            }
          } catch (error) {
            console.warn(`Error loading translation file at ${filePath}.yaml for ${language}. Falling back to default translations.`, error);
            return defaultTranslations;
          }
        };
      
        return (
          <LanguageContext.Provider value={{ language, setLanguage, getTranslations }}>
            {children}
          </LanguageContext.Provider>
        );
      };
      
      // 自定义 hook，用于方便访问语言上下文
      export const useAppLanguage = () => {
        const context = useContext(LanguageContext);
        if (!context) {
          throw new Error('useAppLanguage must be used within a LanguageProvider');
        }
        return context;
      };
      --- End of File ---
  [public]
    [images]